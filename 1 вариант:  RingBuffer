class RingBuffer():
    def __init__(self, size):
        self.queue = [None] * size
        self.size = size
        self.head = 0  # идекс первого элемента в очереди
        self.tail = 0  # индекс последнего элемента в очереди
        self.count = 0  # текущее количество элементов в очереди

    def append(self, value):
        self.queue.append(value)
        if self.count == self.size:
            raise Exception("Очередь перолнена")

        self.queue[self.tail] = value
        self.tail = (self.tail + 1) % self.size
        self.count += 1

    def remove(self):
        if self.count == 0:
            raise Exception("Очередь пуста")

        value = self.queue[self.head]
        self.head = (self.head + 1) % self.size
        self.count -= 1
        return value

    def __repr__(self):
        return f"RingBuffer(size={self.size}, head={self.head}, tail={self.tail}, count={self.count})"

